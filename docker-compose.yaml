
version: "3.9"

services:
  mongodb:
    image: mongo:latest
    restart: always
    container_name: mongo
    hostname: mongodb-hostname
    logging:
      driver: "none"
    ports:
      - "27017:27017"
    networks:
      - mynetwork
    volumes:
      - mongodb_data:/data/db
    command: ["mongod", "--quiet"]

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - mynetwork

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672" 
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123

  mail-system-service:
    build:
      context: ./mail-system-service
      dockerfile: Dockerfile
    env_file:
      - path: .env
        required: true
    container_name: mail-system
    hostname: mail-system-hostname
    restart: always
    ports:
      - "443:443"
      - "3000:3000"
      - "5000:5000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
  
    networks:
      - mynetwork
    volumes:
      - ./mail-system-service:/mail-system-service
      - /mail-system-service/node_modules
    command: nodemon --legacy-watch index.js

volumes:
  mongodb_data: {}
  redis_data:

networks:
  mynetwork:
    driver: bridge
